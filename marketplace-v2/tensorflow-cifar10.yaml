protocolVersion: 2
name: tensorflow_cifar10
type: job
version: 1.0
contributor: OpenPAI
description: |
  # TensorFlow Distributed Training
  This example runs TensorFlow Distributed Training on OpenPAI using CIFAR10.
  Scripts are from TensorFlow Benchmarks repository, please refer to
  https://github.com/tensorflow/benchmarks/tree/master/scripts/tf_cnn_benchmarks.

parameters:
  model: resnet20
  batchsize: 32

prerequisites:
  - protocolVersion: 2
    name: tf_example
    type: dockerimage
    version: 1.0-r1.4
    contributor: OpenPAI
    description: |
      This is an [example TensorFlow Docker image on OpenPAI](https://github.com/Microsoft/pai/tree/master/examples/tensorflow).
      It is built for TensorFlow r1.4 with HDFS support.
    uri: openpai/pai.example.tensorflow
  - protocolVersion: 2
    name: tensorflow_cifar10_model
    type: output
    version: 1.0
    contributor: OpenPAI
    description: |
      Output directory for CIFAR10 training on HDFS, contains pre-trained models.
    uri: hdfs://192.168.0.1:9000/core/cifar10_model
  - protocolVersion: 2
    name: tensorflow_cnnbenchmarks
    type: script
    version: 84820935288cab696c9c2ac409cbd46a1f24723d
    contributor: MaggieQi
    description: |
      # TensorFlow benchmarks
      This repository contains various TensorFlow benchmarks. Currently, it consists of two projects
      * scripts/tf_cnn_benchmarks
        The TensorFlow CNN benchmarks contain benchmarks for several convolutional neural networks.
      * scripts/keras_benchmarks
        The Keras benchmarks contain benchmarks for several models using Keras. Note this project is deprecated and unmaintained.
    uri: https://github.com/MaggieQi/benchmarks
  - protocolVersion: 2
    name: cifar10
    type: data
    version: latest
    contributor: OpenPAI
    description: |
      # The CIFAR10 dataset
      The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class.
      There are 50000 training images and 10000 test images.

      ## Dataset Split
      The dataset is divided into five training batches and one test batch, each with 10000 images.
      The test batch contains exactly 1000 randomly-selected images from each class.
      The training batches contain the remaining images in random order, but some training batches may contain more images from one class than another.
      Between them, the training batches contain exactly 5000 images from each class.

      ## Baseline Results
      You can find some baseline replicable results on this dataset on the project page for cuda-convnet.
      These results were obtained with a convolutional neural network.
      Briefly, they are 18% test error without data augmentation and 11% with.
      Additionally, Jasper Snoek has a new paper in which he used Bayesian hyperparameter optimization to find nice settings of the weight decay and other hyperparameters,
      which allowed him to obtain a test error rate of 15% (without data augmentation) using the architecture of the net that got 18%.

      ## Reference
      1. https://www.cs.toronto.edu/~kriz/cifar.html
      2. Learning Multiple Layers of Features from Tiny Images, Alex Krizhevsky, 2009.
    uri:
      - https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz

taskRoles:
  worker:
    instances: 1
    completion:
      minSucceededInstances: 1
    dockerImage: tf_example
    data: cifar10
    output: tensorflow_cifar10_model
    script: tensorflow_cnnbenchmarks
    resourcePerInstance:
      cpu: 2
      memoryMB: 16384
      gpu: 4
    commands:
      - cd script_<% $script.name %>/scripts/tf_cnn_benchmarks
      - >
        python tf_cnn_benchmarks.py --job_name=worker
        --local_parameter_device=gpu
        --variable_update=parameter_server
        --ps_hosts=$PAI_TASK_ROLE_psserver_HOST_LIST
        --worker_hosts=$PAI_TASK_ROLE_worker_HOST_LIST
        --task_index=$PAI_CURRENT_TASK_ROLE_CURRENT_TASK_INDEX
        --data_name=<% $data.name %>
        --data_dir=$PAI_WORK_DIR/data_<% $data.name %>
        --train_dir=$PAI_WORK_DIR/output_<% $output.name %>
        --model=<% $parameters.model %>
        --batch_size=<% $parameters.batchsize %>
  psserver:
    instances: 1
    completion:
      minSucceededInstances: 1
    dockerImage: tf_example
    data: cifar10
    output: tensorflow_cifar10_model
    script: tensorflow_cnnbenchmarks
    resourcePerInstance:
      cpu: 2
      memoryMB: 16384
      gpu: 1
    commands:
      - cd script_<% $script.name %>/scripts/tf_cnn_benchmarks
      - >
        python tf_cnn_benchmarks.py --job_name=ps
        --local_parameter_device=gpu
        --variable_update=parameter_server
        --ps_hosts=$PAI_TASK_ROLE_psserver_HOST_LIST
        --worker_hosts=$PAI_TASK_ROLE_worker_HOST_LIST
        --task_index=$PAI_CURRENT_TASK_ROLE_CURRENT_TASK_INDEX
        --data_dir=$PAI_WORK_DIR/data_<% $data.name %>
        --data_name=<% $data.name %>
        --train_dir=$PAI_WORK_DIR/output_<% $output.name %>
        --model=<% $parameters.model %>
        --batch_size=<% $parameters.batchsize %>

deployments:
  - name: tf_example
    taskRoles:
      worker:
        preCommands:
          # remove in the image otherwise cannot find gpu
          - rm /usr/local/cuda/lib64/stubs/libcuda.so.1
          - wget -qO- <% $data.uri[0] %> | tar xvz && mv cifar-10-batches-py data_<% $data.name %>
          - >
            git clone <% $script.uri %> script_<% $script.name %> &&
            cd script_<% $script.name %> && git checkout <% $script.version %> && cd ..
      psserver:
        preCommands:
          # remove in the image otherwise cannot find gpu
          - rm /usr/local/cuda/lib64/stubs/libcuda.so.1
          - wget -qO- <% $data.uri[0] %> | tar xvz && mv cifar-10-batches-py data_<% $data.name %>
          - >
            git clone <% $script.uri %> script_<% $script.name %> &&
            cd script_<% $script.name %> && git checkout <% $script.version %> && cd ..
        postCommands:
          - echo "Uploading data ..." # && hdfs dfs -cp output_<% $output.name %> <% $output.uri %>

defaults:
  deployment: tf_example
