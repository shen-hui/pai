#!/bin/bash -x

# Copyright (c) Microsoft Corporation
# All rights reserved.
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
# to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

KERNEL_FULL_VERSION=`uname -r`
CURRENT_DRIVER=${DRIVER_PATH}/current

function nvidiaPresent {
  [[ -f /proc/driver/nvidia/version ]] || return 1
  grep -q $NVIDIA_VERSION /proc/driver/nvidia/version || return 2
  lsmod | grep -qE "^nvidia" || return 3
  lsmod | grep -qE "^nvidia_uvm" || return 3
  [[ -e /dev/nvidia0 ]] || return 4
  [[ -e ${DRIVER_PATH}/$NVIDIA_VERSION/lib64/libnvidia-ml.so ]] || return 5

  [[ -e /etc/ld.so.conf.d/nvidia-drivers.conf ]] || return 6
  return 0
}

echo ======== If NVIDIA present exit early =========
nvidiaPresent
if [ $? == 0 ] ; then
    if [[ ! -L $CURRENT_DRIVER ]]; then
        mkdir -p `dirname $CURRENT_DRIVER`
        ln -s $DRIVER_PATH/$NVIDIA_VERSION $CURRENT_DRIVER
    fi
    exit 0
fi

echo ======== If NVIDIA driver already running uninstall it =========
lsmod | grep -qE "^nvidia" &&
{
    DEP_MODS=`lsmod | tr -s " " | grep -E "^nvidia" | cut -f 4 -d " "`
    for mod in ${DEP_MODS//,/ }
    do
        rmmod $mod ||
        {
            echo "The driver $mod is still in use, can't unload it."
            exit 1
        }
    done
    rmmod nvidia ||
    {
        echo "The driver nvidia is still in use, can't unload it."
        exit 1
    }
}

echo === Building and installing NVIDIA modules
# Add new directories to ld.so to make sure that the dependencies
# are properly recorded and in the ld.so cache for later discovery.
echo $NV_DRIVER/lib > /etc/ld.so.conf.d/nvidia-drivers.conf
echo $NV_DRIVER/lib64 >> /etc/ld.so.conf.d/nvidia-drivers.conf
mkdir -p $NV_DRIVER/lib $NV_DRIVER/lib64 $NV_DRIVER/bin || exit $?

# Install NVIDIA driver user mode components to a directory
# that is mapped outside of Docker file, for easier mapping into
# user job containers afterwards.
./NVIDIA-Linux-x86_64-$NVIDIA_VERSION/nvidia-installer \
    --utility-prefix=$NV_DRIVER \
    --opengl-prefix=$NV_DRIVER \
    --x-prefix=$NV_DRIVER \
    --compat32-prefix=$NV_DRIVER \
    --opengl-libdir=lib64 \
    --utility-libdir=lib64 \
    --x-library-path=lib64 \
    --compat32-libdir=lib \
    --dkms \
    -a -s -N

echo === Loading NVIDIA UVM module
modprobe nvidia-uvm || exit $?

echo === Creating /dev entries
UVM_MAJOR=`grep nvidia-uvm /proc/devices | awk '{print $1}'`
FRONTEND_MAJOR=`grep nvidia-frontend /proc/devices | awk '{print $1}'`
rm -f /dev/nvidia* 2>/dev/null
mknod -m 666 /dev/nvidia-uvm c $UVM_MAJOR 0 || exit $?
mknod -m 666 /dev/nvidiactl c $FRONTEND_MAJOR 255 || exit $?
GPU_COUNT=`ls /proc/driver/nvidia/gpus | wc -l`
echo === Number of GPUS: $GPU_COUNT
for ((GPU=0; GPU<$GPU_COUNT; GPU++)); do
  mknod -m 666 /dev/nvidia$GPU c $FRONTEND_MAJOR $GPU || exit $?
done

ls -la /dev/nvidia*

ldconfig

echo === Check if everything is loaded
nvidiaPresent || exit $?

echo === Checking the driver
nvidia-smi || exit $?

echo === Updating current driver
# Remove previous soft link for current driver
[[ -L $CURRENT_DRIVER ]] &&
{
    rm -f $CURRENT_DRIVER || exit $?
}

# Remove benign issue where "current" exists as directory
[[ -d $CURRENT_DRIVER ]] &&
{
    echo === Removing current driver as directory, should be soft link
    rm -rf $CURRENT_DRIVER || exit $?
}

ln -s -f $NV_DRIVER $CURRENT_DRIVER || exit $?

[[ -L $CURRENT_DRIVER ]] ||
{
    echo ======== Current drivers link not updated =========
    exit 1
}

echo NVIDIA driver installed successfully
