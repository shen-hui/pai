#!/bin/bash

# Copyright (c) Microsoft Corporation
# All rights reserved.
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
# to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Recognize InfiniBand supported network card
lspci | grep -qE '(Network|Infiniband) controller.*Mellanox.*ConnectX' ||
{
    echo ======== No IB present, exit early =========
    exit 1
}

# This script is used for installation of InfiniBand drivers
KERNEL_FULL_VERSION=`uname -r`

HOSTNAME=`hostname`
# HACK: using last octet of the host's IP
LAST_OCTET=`host $HOSTNAME | head -n1 | sed 's/^.*\.//'`
echo POD_IP: ${POD_IP}
OCT1=33
echo OCT1: $OCT1
OCT2=`echo ${POD_IP} | awk -F'.' '{ print $(NF) }'`
echo OCT1: $OCT2
IP_ADDRESS="192.168.${OCT1}.${OCT2}"

echo IB_ADDRESS: $IP_ADDRESS

CURRENT_DRIVER=/var/drivers/mellanox/current

if [[ ! -f /var/drivers/mellanox/$MLNX_OFED_STRING/mlnxofedinstall ]]; then
    [[ -f /tmp/$MLNX_OFED_STRING-ext.tgz ]] ||
    {
        ./$MLNX_OFED_STRING/mlnx_add_kernel_support.sh -y -m ./$MLNX_OFED_STRING --make-tgz || exit $?
    }
    mkdir -p /var/drivers/mellanox/$MLNX_OFED_STRING || exit $?
    tar -xvf /tmp/$MLNX_OFED_STRING-ext.tgz -C /var/drivers/mellanox/$MLNX_OFED_STRING --strip 1 || exit $?
    [[ -L $CURRENT_DRIVER ]] &&
    {
        rm -f $CURRENT_DRIVER || exit $?
    }
    ln -s -f /var/drivers/mellanox/$MLNX_OFED_STRING $CURRENT_DRIVER || exit $?
fi

function ibPresent {
    # Check that at least one IP address is up for IB
    ip a | grep "state UP" -A 2 | grep -q $IP_ADDRESS || return 1
    # Make sure that the devices are configured in connected mode. See below.
    cat /sys/class/net/ib*/mode | grep -q datagram && echo 7
    lsmod | grep -qE "^mlx[4-5]_ib" || return 2
    [[ -e /dev/infiniband/rdma_cm ]] || return 3
    lsmod | grep -qE "^nv_peer_mem" || return 4
    lsmod | grep -qE "^gdrdrv" || return 5
    grep -q "$HOSTNAME" /sys/class/infiniband/mlx?_?/node_desc || return 6
    return 0
}

echo ======== If IB present exit early =========
ibPresent &&
{
    # Install only user mode diagnostic components of Mellanox drivers
    echo "====== Installing Infiniband drivers (diag components only) ======"
    pushd $CURRENT_DRIVER || exit $?
    echo "infiniband-diags=y" > /tmp/ibdiag.conf || exit $?
    ./mlnxofedinstall --force --without-dkms --without-fw-update -c /tmp/ibdiag.conf || exit $?
    popd
    ibstat || exit $?
    exit 0
}

# The following lines uninstall inbox network drivers and install
# Mellanox OFED drivers, which are more reliable and have better tools.
echo ====== Installing Infiniband drivers ======

# If we had incorrect install last time, first remove ib's
for iface in `ifconfig 2>/dev/null | grep -oE "ib[0-9]" | xargs`
do
    ifconfig $iface down || exit $?
done

# Then remove nv_peer_mem
lsmod | grep -qE "^nv_peer_mem" &&
{
    rmmod nv_peer_mem || exit $?
}

# Then gdrdrv
lsmod | grep -qE "^gdrdrv" &&
{
    rmmod gdrdrv || exit $?
}

# Since we already prepared kernel modules above we don't need --add-kernel-support switch
pushd $CURRENT_DRIVER || exit $?
./mlnxofedinstall --force --kernel-only --without-dkms --without-fw-update --with-infiniband-diags || exit $?
popd

# Disable enhanced ipoib
cat << EOF > /etc/modprobe.d/ib_ipoib.conf
alias netdev-ib* ib_ipoib
options ib_ipoib send_queue_size=128 recv_queue_size=128 ipoib_enhanced=0
EOF

/etc/init.d/openibd restart || exit $?

# Installing GPU direct RDMA drivers
# NOTE: do this here because it takes some time to install GDR drivers
# and that's enough time for IB devices to come up so we can test them
./install-gdr-drivers || exit $?

IB_DEVICES=`ibstat -l | xargs`

# The ib_ipoib modules automatically creates network devices for ip assignment. We use the last 48 bytes of the hardware address
# to map the devices to their corresponding mellanox devices.
declare -A ADDRESS_MAP
for device_path in /sys/class/net/ib*;
do
    address=$(cat "$device_path/address" | sed "s/://g")
    ADDRESS_MAP["${address: -12}"]=${device_path: -3}
done


for dev in $IB_DEVICES
do
    for port_path in /sys/class/infiniband/$dev/ports/*
    do
        if grep -q InfiniBand "$port_path/link_layer" && grep -q LinkUp "$port_path/phys_state"; then

            grep -q "$HOSTNAME" /sys/class/infiniband/$dev/node_desc || echo "$HOSTNAME" > /sys/class/infiniband/$dev/node_desc || exit $?

            # Configuring IP address for IP-over-IB interface
            GID=$(cat "$port_path/gids/0" | sed "s/://g")
            GID_ADDRESS=${GID: -12}
            IB_INTERFACE=${ADDRESS_MAP[$GID_ADDRESS]}
            IB_IP_ADDRESS="192.168.${OCT1}.${OCT2}"
            echo "Assiging ip address $IB_IP_ADDRESS for $IB_INTERFACE interface"
            ifconfig $IB_INTERFACE up $IB_IP_ADDRESS/24 || exit $?
            grep -q "connected" /sys/class/net/$IB_INTERFACE/mode || echo "connected" > /sys/class/net/$IB_INTERFACE/mode || exit $?
            grep -q "65520" /sys/class/net/$IB_INTERFACE/mtu || echo "65520" > /sys/class/net/$IB_INTERFACE/mtu || exit $?
            OCT1=$((OCT1+1))
        fi

        if grep -q Ethernet "$port_path/link_layer" && grep -qE "LinkUp|Polling" "$port_path/phys_state"; then
            ETH_INTERFACE=`ls /sys/class/infiniband/$dev/device/net | grep -v ib`
            grep -q "1500" /sys/class/net/$ETH_INTERFACE/mtu || echo "1500" > /sys/class/net/$ETH_INTERFACE/mtu || exit $?
        fi
    done
done

# Verifying whether IB is up and running by invoking ibstat. This will also print basic device/link information
ibstat || exit $?
ibdev2netdev || exit $?

# Final check
ibPresent
echo ibPresent exit value: $?
